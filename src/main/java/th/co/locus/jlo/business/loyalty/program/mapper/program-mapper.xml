<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="program">
	
	<!-- All about Program -->
	<select id="getProgramList" resultType="ProgramModelBean"> 
       	SELECT P.PROGRAM_ID 
				  ,P.PROGRAM_CODE 
			      ,P.PROGRAM_NAME AS PROGRAM 
			      ,P.DESCRIPTION 
			      ,P.START_DATE 
			      ,P.END_DATE 
                  ,P.ACTIVE_FLAG AS activeFlag
                  ,P.PROMOTION_CALCULATE_RULE AS promotionCalculateRuleId
			      ,P.POINT_EXP_BASIS AS pointExpireBasisId
			      ,CB2.CODE_NAME AS promotionCalculateRule
			      ,CB3.CODE_NAME AS pointExpireBasis
			      ,P.CREATED_DATE 
			      ,P.CREATED_BY 
			      ,P.UPDATED_DATE
			      ,P.UPDATED_BY 
			  FROM LOY_PROGRAM P
			  LEFT JOIN TB_CODEBOOK CB2 ON CB2.CODE_ID = P.PROMOTION_CALCULATE_RULE  AND CB2.CODE_TYPE = 'PROMOTION_CALCULATE_RULE'
			  LEFT JOIN TB_CODEBOOK CB3 ON CB3.CODE_ID = P.POINT_EXP_BASIS  AND CB3.CODE_TYPE = 'POINT_EXP_BASIS'
		<where>	
		  	<if test="programId != null">
		    	P.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="programCode != null">
		    	<bind name="programCode" value="'%' + programCode + '%'" />
		    	AND P.PROGRAM_CODE LIKE #{programCode}
		  	</if>
		  	<if test="program != null">
		    	<bind name="program" value="'%' + program + '%'" />
		    	 AND P.PROGRAM_NAME LIKE #{program}
		  	</if>
		  	<if test="promotionCalculateRuleId != null">
		    	AND P.PROMOTION_CALCULATE_RULE = #{promotionCalculateRuleId}
		  	</if>
		  	<if test="activeFlag != null">
		    	AND P.ACTIVE_FLAG = #{activeFlag}
		  	</if>
		  	<if test="buId != null">
		    	AND P.BU_ID = #{buId}
		  	</if>
	  	</where>		
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'programCode'">
		  			ORDER BY P.PROGRAM_CODE ${sortDirection}
		  		</if>
		  		<if test="sortColumn == 'program'">
		  			ORDER BY P.PROGRAM_NAME ${sortDirection}
		  		</if>
		  		<if test="sortColumn == 'startDate'">
		  			ORDER BY P.START_DATE ${sortDirection}
		  		</if>
		  		<if test="sortColumn == 'endDate'">
		  			ORDER BY P.END_DATE ${sortDirection}
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY P.PROGRAM_NAME ASC
		  	</otherwise>
	  	</choose>
	</select>
	<select id="findProgramById" resultType="ProgramModelBean">
			SELECT P.PROGRAM_ID 
				  ,P.PROGRAM_CODE 
			      ,P.PROGRAM_NAME AS PROGRAM 
			      ,P.DESCRIPTION 
			      ,P.START_DATE 
			      ,P.END_DATE 
                  ,P.ACTIVE_FLAG AS activeFlag
                  ,P.PROMOTION_CALCULATE_RULE AS promotionCalculateRuleId
			      ,P.POINT_EXP_BASIS AS pointExpireBasisId
			      ,CB2.CODE_NAME AS promotionCalculateRule
			      ,CB3.CODE_NAME AS pointExpireBasis
			      ,P.CREATED_DATE 
			      ,P.CREATED_BY 
			      ,P.UPDATED_DATE
			      ,P.UPDATED_BY 
			  FROM LOY_PROGRAM P
			  LEFT JOIN TB_CODEBOOK CB2 ON CB2.CODE_ID = P.PROMOTION_CALCULATE_RULE  AND CB2.CODE_TYPE = 'PROMOTION_CALCULATE_RULE'
			  LEFT JOIN TB_CODEBOOK CB3 ON CB3.CODE_ID = P.POINT_EXP_BASIS  AND CB3.CODE_TYPE = 'POINT_EXP_BASIS'
			WHERE P.PROGRAM_ID = #{programId}
	</select>
		
	<insert id="createProgram" keyColumn="PRODUCT_ID" keyProperty="programId" useGeneratedKeys="true">
		INSERT INTO LOY_PROGRAM(
					PROGRAM_NAME
				   ,PROGRAM_CODE
		           ,DESCRIPTION
		           ,ACTIVE_FLAG
		           ,START_DATE
		           ,END_DATE
		           ,PROMOTION_CALCULATE_RULE
		           ,POINT_EXP_BASIS
		           ,CREATED_DATE
		           ,CREATED_BY
		           ,UPDATED_DATE
		           ,UPDATED_BY
		           ,BU_ID
		) VALUES (
					#{program}
				   ,#{programCode}
		           ,#{description}
		           ,#{activeFlag}
		           ,#{startDate}
		           ,#{endDate}
		           ,#{promotionCalculateRuleId}
		           ,#{pointExpireBasisId}
		           ,NOW()
		           ,#{createdBy}
		           ,NOW()
		           ,#{createdBy}
		           ,#{buId}
		)
	</insert>
	
	<update id="updateProgram">
				UPDATE LOY_PROGRAM 
				SET PROGRAM_NAME = #{program}
				   ,PROGRAM_CODE = #{programCode}
		           ,DESCRIPTION = #{description}
		           ,ACTIVE_FLAG = #{activeFlag}
		           ,START_DATE = #{strStartDate}
		           ,END_DATE = #{strEndDate}
		           ,PROMOTION_CALCULATE_RULE = #{promotionCalculateRuleId}
		           ,POINT_EXP_BASIS = #{pointExpireBasisId}
		           ,UPDATED_DATE = NOW()
		           ,UPDATED_BY = #{updatedBy}
				WHERE PROGRAM_ID = #{programId}
	</update>
	
	<delete id="deleteProgram">
			DELETE FROM LOY_PROGRAM WHERE PROGRAM_ID = #{programId}
	</delete>
	
	<!-- Program Attribute Group in Attribute Tab -->
	<select id="getAttributeGroupList" resultType="ProgramAttributeModelBean"> 
       		SELECT ATTR_GROUP_ID
					,ATTR_GROUP_NAME
			FROM LOY_ATTRIBUTE_GROUP 
		  	ORDER BY ATTR_GROUP_NAME ASC  	
	</select>

	<select id="findAttributeGroupById" resultType="ProgramAttributeModelBean">
			SELECT ATTR_GROUP_ID
					,ATTR_GROUP_NAME
			FROM LOY_ATTRIBUTE_GROUP
			WHERE ATTR_GROUP_ID = #{attrGroupId}
	</select>

	<insert id="createAttributeGroup" keyColumn="ATTRIBUTE_GROUP_ID" keyProperty="attrGroupId" useGeneratedKeys="true">
		INSERT INTO LOY_ATTRIBUTE_GROUP (
			ATTR_GROUP_NAME
			, PROGRAM_ID
			, CREATED_DATE
			, CREATED_BY
			, UPDATED_DATE
			, UPDATED_BY
		) VALUES (
			#{attrGroupName}
			, #{programId}
			, NOW()
			, #{createdBy}
			, NOW()
			, #{updatedBy}
		)
	</insert>

	<update id="updateAttributeGroup">
			UPDATE LOY_ATTRIBUTE_GROUP 
			SET ATTR_GROUP_NAME = #{attrGroupName}
				,UPDATED_DATE = NOW()
		    	,UPDATED_BY = #{updatedBy}
			WHERE ATTR_GROUP_ID = #{attrGroupId}
	</update>	
	
	
	<!-- Program Attribute List in Attribute Tab -->
	<select id="getAttributeList" resultType="ProgramAttributeModelBean"> 
       		SELECT A.ATTR_ID
				, A.ATTR_NAME
				, A.ATTR_GROUP_ID
				, A.ATTR_GROUP_NAME
				, A.PROGRAM_ID
				, A.ATTR_ACTIVE_YN
				, A.OBJECT_NAME
				, A.FIELD_NAME
				, A.READ_ONLY_YN
				, A.DATA_TYPE
				, dataTypeCd.CODE_NAME AS DATA_TYPE_NAME
				, A.ATTR_PICK_LIST
				, A.METHOD
				, method_cd.CODE_NAME AS METHOD_NAME
				, A.REMARK
				, A.CREATED_DATE
				, A.CREATED_BY
				, A.UPDATED_DATE
				, A.UPDATED_BY
			FROM LOY_ATTRIBUTE A
			INNER JOIN LOY_ATTRIBUTE_GROUP AG
				ON AG.ATTR_GROUP_ID = A.ATTR_GROUP_ID
			LEFT JOIN TB_CODEBOOK dataTypeCd
				ON dataTypeCd.CODE_ID = A.DATA_TYPE  AND dataTypeCd.CODE_TYPE = 'PROGRAM_DATA_TYPE_ATTRIBUTE'
			LEFT JOIN TB_CODEBOOK method_cd
				ON method_cd.CODE_ID = A.METHOD AND method_cd.CODE_TYPE = 'PROGRAM_ATTRIBUTE_METHOD'
		<where>	
		  	<if test="programId != null">
		    	AND A.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="attrGroupId != null">
		    	AND A.ATTR_GROUP_ID = #{attrGroupId}
		  	</if>
		  	<if test="buId != null">
		    	AND A.BU_ID = #{buId}
		  	</if>
	  	</where>		
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'attrName'">
		  			ORDER BY A.ATTR_NAME ${sortDirection}
		  		</if>
		  		<if test="sortColumn == 'fieldName'">
		  			ORDER BY A.FIELD_NAME ${sortDirection}
		  		</if>
		  		<if test="sortColumn == 'dataTypeName'">
		  			ORDER BY DATA_TYPE ${sortDirection}
		  		</if>
		  		<if test="sortColumn == 'attrPickList'">
		  			ORDER BY A.ATTR_PICK_LIST ${sortDirection}
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY A.ATTR_NAME ASC
		  	</otherwise>
	  	</choose>
	</select>

	<select id="findAttributeById" resultType="ProgramAttributeModelBean">
			SELECT A.ATTR_ID
				, A.ATTR_NAME
				, A.ATTR_GROUP_ID
				, A.ATTR_GROUP_NAME
				, A.PROGRAM_ID
				, A.ATTR_ACTIVE_YN
				, A.OBJECT_NAME
				, A.FIELD_NAME
				, A.READ_ONLY_YN
				, A.DATA_TYPE
				, CB1.CODE_NAME AS DATA_TYPE_NAME
				, A.ATTR_PICK_LIST
				, A.METHOD
				, CB2.CODE_NAME AS METHOD_NAME
				, A.REMARK
				, A.CREATED_DATE
				, A.CREATED_BY
				, A.UPDATED_DATE
				, A.UPDATED_BY
			FROM LOY_ATTRIBUTE A
			LEFT JOIN LOY_ATTRIBUTE_GROUP AG ON AG.ATTR_GROUP_ID = A.ATTR_GROUP_ID
			LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = A.DATA_TYPE  AND CB1.CODE_TYPE = 'PROGRAM_DATA_TYPE_ATTRIBUTE'
			LEFT JOIN TB_CODEBOOK CB2 ON CB2.CODE_ID = A.METHOD  AND CB2.CODE_TYPE = 'PROGRAM_ATTRIBUTE_METHOD'
			WHERE A.ATTR_ID = #{attrId}
	</select>

	<insert id="createAttribute" keyColumn="ATTRIBUTE_ID" keyProperty="attrId" useGeneratedKeys="true">
			INSERT INTO LOY_ATTRIBUTE (
					ATTR_GROUP_ID
		           ,OBJECT_NAME
		           ,ATTR_NAME
		           ,ATTR_ACTIVE_YN
		           ,FIELD_NAME
		           ,READ_ONLY_YN
		           ,DATA_TYPE
		           ,ATTR_PICK_LIST
		           ,METHOD
		           ,REMARK
		           , BU_ID
		           ,CREATED_DATE
		           ,CREATED_BY
		           ,UPDATED_DATE
		           ,UPDATED_BY
		    ) VALUES (
		    		#{attrGroupId}
		           ,#{objectName}
		           ,#{attrName}
		           ,#{attrActiveYn}
		           ,#{fieldName}
		           ,#{readOnlyYn}
		           ,#{dataType}
		           ,#{attrPickList}
		           ,#{method}
		           ,#{remark}
		           , #{buId}
		           ,NOW()
		           ,#{createdBy}
		           ,NOW()
		           ,#{updatedBy}
		    )
	</insert>

	<update id="updateAttribute">
			UPDATE LOY_ATTRIBUTE
		   	SET OBJECT_NAME = #{objectName}
			      ,ATTR_NAME = #{attrName}
			      ,ATTR_ACTIVE_YN = #{attrActiveYn}
			      ,FIELD_NAME = #{fieldName}
			      ,READ_ONLY_YN = #{readOnlyYn}
			      ,DATA_TYPE = #{dataType}
			      ,ATTR_PICK_LIST = #{attrPickList}
			      ,METHOD = #{method}
			      ,REMARK = #{remark}
			      ,UPDATED_DATE = NOW()
			      ,UPDATED_BY = #{updatedBy}
		   	WHERE ATTR_ID = #{attrId}
	</update>
	
	<delete id="deleteAttribute">
			DELETE FROM LOY_ATTRIBUTE WHERE ATTR_ID = #{attrId}
	</delete>
	
	<!-- Program Tier List in Tier Tab -->
	<select id="getTierList" resultType="ProgramTierModelBean">
	 		SELECT 
	 			  T.TIER_ID	
				, T.PROGRAM_ID
				, T.TIER_CODE
				, T.TIER_NAME AS TIER
				, T.REMARK
				, T.BASE_FLAG
				, T.TIER_ACTIVE_FLAG AS ACTIVE_FLAG
				, T.LIMIT_SPENDING_PER_TIME
				, T.LIMIT_SPENDING_PER_MONTH
				, T.LIMIT_SPENDING_PER_DAY
				, T.TIER_IMG_PATH
				, T.SPENDING
				, T.POINT
				, T.TIER_LEVEL
				, T.CREATED_DATE
				, T.CREATED_BY
				, T.UPDATED_DATE
				, T.UPDATED_BY 
			FROM LOY_TIER T
			  LEFT JOIN LOY_PROGRAM P ON P.PROGRAM_ID = T.PROGRAM_ID
		<where>
		  	<if test="programId != 0">
		    	AND T.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="tier != null">
		    	AND T.TIER_NAME = #{tier}
		  	</if>
		  	<if test="tierId != null">
		    	AND T.TIER_ID = #{tierId}
		  	</if>
		  	<if test="baseFlag != null">
		    	AND T.BASE_FLAG = #{baseFlag}
		  	</if>
		  	<if test="buId != null">
		    	AND T.BU_ID = #{buId}
		  	</if>
	  	</where>
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'tier'">
		  			ORDER BY T.TIER_NAME ${sortDirection}
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY T.TIER_LEVEL ASC
		  	</otherwise>
	  	</choose>
	</select>

	<select id="findTierById" resultType="ProgramTierModelBean">
			SELECT T.TIER_ID	
				, T.PROGRAM_ID
				, T.TIER_CODE
				, T.TIER_NAME AS TIER
				, T.REMARK
				, T.BASE_FLAG
				, T.TIER_ACTIVE_FLAG AS ACTIVE_FLAG
				, T.LIMIT_SPENDING_PER_TIME
				, T.LIMIT_SPENDING_PER_MONTH
				, T.LIMIT_SPENDING_PER_DAY
				, T.TIER_IMG_PATH
				, T.SPENDING
				, T.POINT
				, T.TIER_LEVEL
				, T.CREATED_DATE
				, T.CREATED_BY
				, T.UPDATED_DATE
				, T.UPDATED_BY 
			FROM LOY_TIER T
			WHERE T.TIER_ID = #{tierId}
	</select>

	<insert id="createTier" keyColumn="TIER_ID" keyProperty="tierId" useGeneratedKeys="true">
		INSERT INTO LOY_TIER(
				PROGRAM_ID
			   ,TIER_CODE
	           ,TIER_NAME
	           ,REMARK
	           ,BASE_FLAG
	           ,SPENDING 
		       ,POINT
	           ,TIER_ACTIVE_FLAG
	           ,LIMIT_SPENDING_PER_TIME
			   ,LIMIT_SPENDING_PER_MONTH
			   ,LIMIT_SPENDING_PER_DAY
			   ,TIER_LEVEL
			   ,BU_ID
	           ,CREATED_DATE
	           ,CREATED_BY
	           ,UPDATED_DATE
	           ,UPDATED_BY
	   ) VALUES (
	           	#{programId}
	           ,#{tierCode}
	           ,#{tier}
	           ,#{remark}
	           ,#{baseFlag}
	           ,#{spending}
	           ,#{point}
	           ,#{activeFlag}
	           ,#{limitSpendingPerTime} 
			   ,#{limitSpendingPerMonth}
		       ,#{limitSpendingPerDay}
		       ,#{tierLevel}
		       ,#{buId}
	           ,NOW()
	           ,#{createdBy}
	           ,NOW()
	           ,#{createdBy}
	   )
	</insert>

	<update id="updateTier">
			UPDATE 
				   LOY_TIER
			SET 
				   TIER_NAME = #{tier}
				  ,TIER_CODE = #{tierCode}
			      ,REMARK = #{remark}
			      ,BASE_FLAG = #{baseFlag}
			      ,SPENDING = #{spending}
		          ,POINT = #{point}
			      ,TIER_ACTIVE_FLAG = #{activeFlag}
			      ,UPDATED_DATE = NOW()
			      ,UPDATED_BY = #{updatedBy}
			      ,TIER_LEVEL = #{tierLevel}
			      ,LIMIT_SPENDING_PER_TIME = #{limitSpendingPerTime} 
				  ,LIMIT_SPENDING_PER_MONTH = #{limitSpendingPerMonth}
				  ,LIMIT_SPENDING_PER_DAY = #{limitSpendingPerDay}
			 WHERE 
			 	   TIER_ID = #{tierId}
	</update>

	<update id="removePrimaryFlagTier">
			UPDATE LOY_TIER
			SET BASE_FLAG = 'N'
				, UPDATED_DATE = NOW()
				, UPDATED_BY = #{updatedBy}
			 WHERE TIER_ID = #{removePrimaryTierId}
	</update>
	
	<delete id="deleteTier">
			DELETE FROM LOY_TIER WHERE LOY_TIER.TIER_ID = #{tierId} 
	</delete>
	
<!-- ############################# Tier - Specific Location Base Point Tab ############################# -->
	<select id="getLocationBasePointList" resultType="LocationBasePointModelBean">
				SELECT TS.TIER_SPECIFIC_ID AS LOCATION_BASE_POINT_ID
					, TS.TIER_ID
					, TS.SHOP_ID
	                , S.SHOP_NAME AS SHOP
	                , ST.SHOP_TYPE_NAME AS SHOP_TYPE 
					, TS.TIER_SPECIFIC_ACTIVE_FLAG AS ACTIVE_FLAG
	                , S.LOCATION AS LOCATION_ID
	                , CB1.CODE_NAME AS LOCATION
					, TS.SPENDING
					, TS.POINT
					, TS.CREATED_DATE
					, TS.CREATED_BY
					, TS.UPDATED_DATE
					, TS.UPDATED_BY
				FROM LOY_TIER_SPECIFIC TS
	            INNER JOIN LOY_SHOP S ON S.SHOP_ID = TS.SHOP_ID
	            INNER JOIN LOY_SHOP_TYPE ST ON ST.SHOP_TYPE_ID = S.SHOP_TYPE_ID
				LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = S.LOCATION  AND CB1.CODE_TYPE = 'LOCATION_CD'
		<where>	
		  	<if test="locationBasePointId != null">
		    	TS.TIER_SPECIFIC_ID = #{locationBasePointId}
		  	</if>
		  	<if test="tierId != null">
		    	TS.TIER_ID = #{tierId}
		  	</if>
	  	</where>		
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'location'">
		  			ORDER BY CB1.CODE_NAME ${sortDirection}	  	
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY CB1.CODE_NAME ASC  	
		  	</otherwise>
	  	</choose>	
	</select>

	<select id="findLocationBasePointById" resultType="LocationBasePointModelBean">
			SELECT TS.TIER_SPECIFIC_ID AS LOCATION_BASE_POINT_ID
					, TS.TIER_ID
					, TS.SHOP_ID
	                , S.SHOP_NAME AS SHOP
	                , ST.SHOP_TYPE_NAME AS SHOP_TYPE 
					, TS.TIER_SPECIFIC_ACTIVE_FLAG AS ACTIVE_FLAG
	                , S.LOCATION AS LOCATION_ID
	                , CB1.CODE_NAME AS LOCATION
					, TS.SPENDING
					, TS.POINT
					, TS.CREATED_DATE
					, TS.CREATED_BY
					, TS.UPDATED_DATE
					, TS.UPDATED_BY 
			FROM LOY_TIER_SPECIFIC TS
            	INNER JOIN LOY_SHOP S ON S.SHOP_ID = TS.SHOP_ID
            	INNER JOIN LOY_SHOP_TYPE ST ON ST.SHOP_TYPE_ID = S.SHOP_TYPE_ID
				LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = S.LOCATION  AND CB1.CODE_TYPE = 'LOCATION_CD'
			WHERE TS.TIER_SPECIFIC_ID = #{locationBasePointId}
	</select>
	
	<select id="getNotSelectedLocationBasePointList" resultType="LocationBasePointModelBean">
			SELECT S.SHOP_ID 	
			      , S.SHOP_NAME AS SHOP
			      , S.SHOP_TYPE_ID 
				  , ST.SHOP_TYPE_NAME AS SHOP_TYPE
			      , S.LOCATION AS LOCATION_ID
	              , CB1.CODE_NAME AS LOCATION
			      , S.FLOOR 
			      , S.SHOP_NO
			      , S.SHOP_GP_TYPE 
			      , S.ACTIVE_FLAG 
		  	FROM LOY_SHOP S
		  		LEFT JOIN LOY_SHOP_TYPE ST ON ST.SHOP_TYPE_ID = S.SHOP_TYPE_ID
				LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = S.LOCATION  AND CB1.CODE_TYPE = 'LOCATION_CD'
		<where>
		  	<if test="tierId != null">
		    	AND S.SHOP_ID NOT IN ( SELECT SHOP_ID FROM LOY_TIER_SPECIFIC WHERE TIER_ID = #{tierId} )
		  	</if>
	  		<if test="shop != null">
		    	<bind name="shop" value="'%' + shop + '%'" />
		    	AND S.SHOP_NAME LIKE #{shop}
		  	</if>
		  	<if test="location != null">
		    	AND S.LOCATION = #{location}
		  	</if>
		  	<if test="shopTypeId != null">
		    	AND S.SHOP_TYPE_ID = #{shopTypeId}
		  	</if>
		  	<if test="buId != null">
		    	AND S.BU_ID = #{buId}
		  	</if>
	  	</where>		
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'shop'">
		  			ORDER BY S.SHOP_NAME ${sortDirection}	  	
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY S.SHOP_NAME ASC  	
		  	</otherwise>
	  	</choose>	
	</select>

	<insert id="createLocationBasePoint" parameterType="map">
			INSERT INTO LOY_TIER_SPECIFIC(
				  TIER_ID
				, SHOP_ID
				, TIER_SPECIFIC_ACTIVE_FLAG
				, SPENDING
				, POINT
				, CREATED_DATE
				, CREATED_BY
				, UPDATED_DATE
				, UPDATED_BY
			) VALUES
			<foreach item="locationBasePoint" index="index" collection="lbpList" open="" separator="," close="">
				(
					#{locationBasePoint.tierId}
		           ,#{locationBasePoint.shopId}
		           ,#{locationBasePoint.activeFlag}
		           ,#{locationBasePoint.spending}
		           ,#{locationBasePoint.point}
		           ,NOW()
		           ,#{locationBasePoint.createdBy}
		           ,NOW()
		           ,#{locationBasePoint.updatedBy}
		        )
	        </foreach>
	</insert>
	<!-- 
	<insert id="insertBatch2" parameterType="map">
		INSERT INTO test_book_backup(bookID, bookName,  originPrice, registDate)
		VALUES
		<foreach item="testBook" index="index" collection="list" open="" separator="," close="">
			(#{testBook.bookID}, #{testBook.bookName}, #{testBook.originPrice},  NOW())
		</foreach>		
	</insert>	
 	-->
	<update id="updateLocationBasePoint">
			UPDATE LOY_TIER_SPECIFIC
			SET SHOP_ID = #{shopId}
				, TIER_SPECIFIC_ACTIVE_FLAG = #{activeFlag}
				, TIER_SPECIFIC_ACTIVE_FLAG = #{activeFlag}
				, SPENDING = #{spending}
				, POINT = #{point}
				, UPDATED_DATE = NOW()
				, UPDATED_BY = #{updatedBy}
			 WHERE TIER_SPECIFIC_ID = #{locationBasePointId} 
	</update>	
	
	<delete id="deleteLocationBasePoint">
			DELETE FROM LOY_TIER_SPECIFIC WHERE TIER_SPECIFIC_ID = #{locationBasePointId}
	</delete> 
	
	
<!-- ############################# Tier - Card Tier Tab ############################# -->
	<select id="getCardTierList" resultType="CardTierModelBean">
		SELECT TC.TIER_CARD_TYPE_ID
				, TC.CARD_TYPE_NAME AS CARD_TYPE
				, TC.TIER_ID
				, TC.PREFIX
				, TC.PRIMARY_FLAG
				, TC.CREATED_DATE
				, TC.CREATED_BY
				, TC.UPDATED_DATE
				, TC.UPDATED_BY 
			FROM LOY_TIER_CARD_TYPE TC
            INNER JOIN loy_tier tier
				on TC.TIER_ID = tier.TIER_ID
		<where>
		  	<if test="tierId != null">
		    	AND TC.TIER_ID = #{tierId}
		  	</if>
		  	<if test="programId != null">
		    	AND tier.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="prefix != null">
		    	AND TC.PREFIX = #{prefix}
		  	</if>
		  	<if test="tierCardTypeId != null">
		    	AND TC.TIER_CARD_TYPE_ID = #{tierCardTypeId}
		  	</if>
		  	<if test="cardType != null">
		    	AND TC.CARD_TYPE_NAME = #{cardType}
		  	</if>
		  	<if test="primaryFlag != null">
		    	AND TC.PRIMARY_FLAG = #{primaryFlag}
		  	</if>
	  	</where>		
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'cardType'">
		  			ORDER BY TC.CARD_TYPE_NAME ${sortDirection}	  	
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY TC.CARD_TYPE_NAME ASC  	
		  	</otherwise>
	  	</choose>	
	</select>

	<select id="findCardTierById" resultType="CardTierModelBean">
			SELECT TC.TIER_CARD_TYPE_ID
				, TC.CARD_TYPE_NAME AS CARD_TYPE
				, TC.TIER_ID
				, TC.PREFIX
				, TC.PRIMARY_FLAG
				, TC.CREATED_DATE
				, TC.CREATED_BY
				, TC.UPDATED_DATE
				, TC.UPDATED_BY 
			FROM LOY_TIER_CARD_TYPE TC
			WHERE
				TC.TIER_CARD_TYPE_ID = #{tierCardTypeId}
	</select>
	
	<insert id="createCardTier" keyColumn="TIER_CARD_TYPE_ID" keyProperty="tierCardTypeId" useGeneratedKeys="true">
			INSERT INTO LOY_TIER_CARD_TYPE
			(
					TIER_ID
		           ,CARD_TYPE_NAME
		           ,PREFIX
		           ,PRIMARY_FLAG
		           ,CREATED_DATE
		           ,CREATED_BY
		           ,UPDATED_DATE
		           ,UPDATED_BY
		    ) VALUES (
		     		#{tierId}
		           ,#{cardType}
		           ,#{prefix}
		           ,#{primaryFlag}
		           ,NOW()
		           ,#{createdBy}
		           ,NOW()
		           ,#{updatedBy}
		    )
	</insert>

	<update id="updateCardTier">
			UPDATE LOY_TIER_CARD_TYPE
			SET CARD_TYPE_NAME = #{cardType}
		          ,PREFIX = #{prefix}
		          ,PRIMARY_FLAG = #{primaryFlag}
			      ,UPDATED_DATE = NOW()
			      ,UPDATED_BY = #{updatedBy}
			 WHERE TIER_CARD_TYPE_ID = #{tierCardTypeId}
	</update>

	<update id="removePrimaryFlagCardTier">
			UPDATE LOY_TIER_CARD_TYPE
			SET PRIMARY_FLAG = 'N'
				, UPDATED_DATE = NOW()
				, UPDATED_BY = #{updatedBy}
			 WHERE TIER_CARD_TYPE_ID = #{removePrimaryCardTierId}
	</update>
	
	<delete id="deleteCardTier">
			DELETE FROM LOY_TIER_CARD_TYPE WHERE TIER_CARD_TYPE_ID = #{tierCardTypeId}
	</delete> 
	
<!-- ############################# Tier - Privilege Tab ############################# -->
	<select id="getPrivilegeList" resultType="PrivilegeModelBean">
			SELECT TP.SERVICE_ID
				, TP.SERVICE_NAME
				, TP.SERVICE_TYPE
				, type_cd.CODE_NAME AS SERVICE_TYPE_NAME
				, TP.TIER_ID
				, TP.PROGRAM_ID
				, TP.UNIT AS UNIT
				, unit_cd.CODE_NAME AS UNIT_NAME
				, TP.UNIT_VALUE
				, TP.LOCATION
				, location_cd.CODE_NAME AS LOCATION_NAME
				, TP.CREATED_DATE
				, TP.CREATED_BY
				, TP.UPDATED_DATE
				, TP.UPDATED_BY 
		    FROM LOY_PROGRAM_TIER_PRIVILEGE TP
		    LEFT JOIN TB_CODEBOOK unit_cd ON unit_cd.CODE_ID = TP.UNIT AND unit_cd.CODE_TYPE = 'UNIT_PERIOD'
		    LEFT JOIN TB_CODEBOOK type_cd ON type_cd.CODE_ID = TP.SERVICE_TYPE AND type_cd.CODE_TYPE = 'PRIVILEGE_TYPE_CD'
		    LEFT JOIN TB_CODEBOOK location_cd ON location_cd.CODE_ID = TP.LOCATION AND location_cd.CODE_TYPE = 'LOCATION_CD'
		<where>
		  	<if test="tierId != null">
		    	TP.TIER_ID = #{tierId}
		  	</if>
		  	<if test="programId != null">
		    	AND TP.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="serviceName != null">
		    	AND TP.SERVICE_NAME = #{serviceName}
		  	</if>
	  	</where>		
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'service'">
		  			ORDER BY TP.SERVICE_ID ${sortDirection}	  	
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY TP.SERVICE_ID ASC
		  	</otherwise>
	  	</choose>	
	</select>

	<select id="findPrivilegeById" resultType="PrivilegeModelBean">
			SELECT TP.SERVICE_ID
				, TP.SERVICE_NAME
				, TP.SERVICE_TYPE
				, type_cd.CODE_NAME AS SERVICE_TYPE_NAME
				, TP.TIER_ID
				, TP.PROGRAM_ID
				, TP.UNIT
				, unit_cd.CODE_NAME AS UNIT_NAME
				, TP.UNIT_VALUE
				, TP.LOCATION
				, location_cd.CODE_NAME AS LOCATION_NAME
				, TP.CREATED_DATE
				, TP.CREATED_BY
				, TP.UPDATED_DATE
				, TP.UPDATED_BY 
		    FROM LOY_PROGRAM_TIER_PRIVILEGE TP
		    LEFT JOIN TB_CODEBOOK unit_cd ON unit_cd.CODE_ID = TP.UNIT AND unit_cd.CODE_TYPE = 'UNIT_PERIOD'
		    LEFT JOIN TB_CODEBOOK type_cd ON type_cd.CODE_ID = TP.SERVICE_TYPE AND type_cd.CODE_TYPE = 'PRIVILEGE_TYPE_CD'
		    LEFT JOIN TB_CODEBOOK location_cd ON location_cd.CODE_ID = TP.LOCATION AND location_cd.CODE_TYPE = 'LOCATION_CD'
			WHERE TP.SERVICE_ID = #{serviceId}
	</select>
	
	<insert id="createPrivilege" keyColumn="SERVICE_ID" keyProperty="serviceId" useGeneratedKeys="true">
		INSERT INTO LOY_PROGRAM_TIER_PRIVILEGE (
			PROGRAM_ID
			, TIER_ID
			, SERVICE_NAME
			, SERVICE_TYPE
			, UNIT
			, UNIT_VALUE
			, LOCATION
			, CREATED_BY
			, CREATED_DATE
			, UPDATED_BY
			, UPDATED_DATE
		) VALUES (
			#{programId}
			, #{tierId}
			, #{serviceName}
			, #{serviceType}
			, #{unit}
			, #{unitValue}
			, #{location}
			, #{createdBy}
			, NOW()
			, #{createdBy}
			, NOW()
		)
	</insert>

	<update id="updatePrivilege">
			UPDATE LOY_PROGRAM_TIER_PRIVILEGE
			SET PROGRAM_ID = #{programId}
		          , TIER_ID = #{tierId}
		          , SERVICE_NAME = #{serviceName}
		          , SERVICE_TYPE = #{serviceType}
		          , UNIT = #{unit}
		          , UNIT_VALUE = #{unitValue}
		          , LOCATION = #{location}
			      , UPDATED_DATE = NOW()
			      , UPDATED_BY = #{updatedBy}
			 WHERE SERVICE_ID = #{serviceId}
	</update>	
	
	<delete id="deletePrivilege">
			DELETE FROM LOY_PROGRAM_TIER_PRIVILEGE WHERE SERVICE_ID = #{serviceId}
	</delete> 
	
	<!-- ############################# Point Type Tab ############################# -->
	<select id="getPointTypeList" resultType="ProgramPointTypeModelBean">
			SELECT PT.POINT_TYPE_ID
				, PT.POINT_TYPE_NAME AS POINT_TYPE
				, PT.PROGRAM_ID
				, PT.ACTIVE_FLAG
				, PT.USE_FOR
				, PT.COST_PER_POINT
				, PT.EXPIRY_BASIS AS EXPIRY_BASIS_ID
				, CB1.CODE_NAME AS expiryBasis
				, PT.EXPIRY_MONTH AS EXPIRY_MONTH_ID
				, CB3.CODE_NAME AS expiryMonth
				, PT.EXPIRY_DAY
				, PT.PERIOD
				, PT.UNIT_PERIOD AS UNIT_PERIOD_ID 
				, CB2.CODE_NAME AS unitPeriod
				, PT.PRIMARY_YN
				, PT.CREATED_DATE
				, PT.CREATED_BY
				, PT.UPDATED_DATE
				, PT.UPDATED_BY
			FROM LOY_PROGRAM_POINT_TYPE PT
			LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = PT.EXPIRY_BASIS AND CB1.CODE_TYPE = 'EXPIRY_BASIS'
			LEFT JOIN TB_CODEBOOK CB2 ON CB2.CODE_ID = PT.UNIT_PERIOD AND CB2.CODE_TYPE = 'UNIT_PERIOD'
			LEFT JOIN TB_CODEBOOK CB3 ON CB3.CODE_ID = PT.EXPIRY_MONTH AND CB3.CODE_TYPE = 'EXPIRY_MONTH'
		<where>
		  	<if test="programId != null">
		    	PT.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="pointTypeId != null">
		    	AND PT.POINT_TYPE_ID = #{pointTypeId}
		  	</if>
		  	<if test="primaryYn != null">
		    	AND PT.PRIMARY_YN = #{primaryYn}
		  	</if>
	  	</where>
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'pointType'">
		  			ORDER BY PT.POINT_TYPE_NAME ${sortDirection}
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY PT.POINT_TYPE_NAME ASC
		  	</otherwise>
	  	</choose>
	</select>

	<select id="findPointTypeById" resultType="ProgramPointTypeModelBean">
		SELECT PT.POINT_TYPE_ID
				, PT.POINT_TYPE_NAME AS POINT_TYPE 
				, PT.PROGRAM_ID
				, PT.ACTIVE_FLAG
				, PT.USE_FOR
				, PT.COST_PER_POINT
				, PT.EXPIRY_BASIS AS EXPIRY_BASIS_ID
				, CB1.CODE_NAME AS expiryBasis
				, PT.EXPIRY_MONTH AS EXPIRY_MONTH_ID
				, CB3.CODE_NAME AS expiryMonth
				, PT.EXPIRY_DAY
				, PT.PERIOD
				, PT.UNIT_PERIOD AS UNIT_PERIOD_ID 
				, CB2.CODE_NAME AS unitPeriod
				, PT.PRIMARY_YN
				, PT.CREATED_DATE
				, PT.CREATED_BY
				, PT.UPDATED_DATE
				, PT.UPDATED_BY 
			FROM LOY_PROGRAM_POINT_TYPE PT
			LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = PT.EXPIRY_BASIS AND CB1.CODE_TYPE = 'EXPIRY_BASIS'
			LEFT JOIN TB_CODEBOOK CB2 ON CB2.CODE_ID = PT.UNIT_PERIOD AND CB2.CODE_TYPE = 'UNIT_PERIOD'
			LEFT JOIN TB_CODEBOOK CB3 ON CB3.CODE_ID = PT.EXPIRY_MONTH AND CB3.CODE_TYPE = 'EXPIRY_MONTH'
			WHERE PT.POINT_TYPE_ID = #{pointTypeId}
	</select>
	
	<insert id="createPointType" keyColumn="POINT_TYPE_ID" keyProperty="pointTypeId" useGeneratedKeys="true">
			INSERT INTO LOY_PROGRAM_POINT_TYPE(
				  PROGRAM_ID
				, POINT_TYPE_NAME
				, USE_FOR
				, COST_PER_POINT
				, ACTIVE_FLAG
				, EXPIRY_BASIS
				, PERIOD
				, UNIT_PERIOD
				, EXPIRY_MONTH
				, EXPIRY_DAY
				, PRIMARY_YN
				, CREATED_BY
				, CREATED_DATE
				, UPDATED_BY
				, UPDATED_DATE
			) VALUES (
				  #{programId}
				, #{pointType}
				, #{useFor}
				, #{costPerPoint}
				, #{activeFlag}
				, #{expiryBasisId}
				, #{period}
				, #{unitPeriodId}
				, #{expiryMonthId}
				, #{expiryDay}
				, #{primaryYn}
				, #{createdBy}
				, NOW()
				, #{createdBy}
				, NOW()
			)	
	</insert>

	<update id="updatePointType">
			UPDATE LOY_PROGRAM_POINT_TYPE
			SET POINT_TYPE_NAME  	= #{pointType}
				, USE_FOR  			= #{useFor}
				, COST_PER_POINT  	= #{costPerPoint}
				, ACTIVE_FLAG  		= #{activeFlag}
				, EXPIRY_BASIS  	= #{expiryBasisId}
				, PERIOD  			= #{period}
				, UNIT_PERIOD  		= #{unitPeriodId}
				, EXPIRY_MONTH  	= #{expiryMonthId}
				, EXPIRY_DAY  		= #{expiryDay}
				, PRIMARY_YN  		= #{primaryYn}
			    , UPDATED_DATE 		= NOW()
			    , UPDATED_BY 		= #{updatedBy}
			 WHERE POINT_TYPE_ID = #{pointTypeId}
			
	</update>

	<update id="removePrimaryFlagPointType">
		UPDATE LOY_PROGRAM_POINT_TYPE
		SET PRIMARY_YN = 'N'
		, UPDATED_DATE = NOW()
		, UPDATED_BY = #{updatedBy}
		WHERE POINT_TYPE_ID = #{removePrimaryPointTypeId}
	</update>
	
	<delete id="deletePointType">
			DELETE FROM LOY_PROGRAM_POINT_TYPE WHERE POINT_TYPE_ID = #{pointTypeId}
	</delete> 	
	
	<!-- ############################# Program ############################# -->
	<select id="getShopList" resultType="ProgramShopModelBean"> 
			SELECT P.PROGRAM_SHOP_INCLUDED_ID
				, P.PROGRAM_ID
				, P.LOCATION AS LOCATION_ID
				, P.SHOP_ID
                , S.SHOP_NAME AS SHOP
				, P.SHOP_TYPE_ID
                , ST.SHOP_TYPE_NAME  AS SHOP_TYPE
				, CB1.CODE_NAME AS LOCATION
				, P.CREATED_DATE
				, P.CREATED_BY
				, P.UPDATED_DATE
				, P.UPDATED_BY 
			 FROM LOY_PROGRAM_SHOP_INCLUDED P
			 INNER JOIN LOY_SHOP S ON S.SHOP_ID = P.SHOP_ID
			 INNER JOIN LOY_SHOP_TYPE ST ON ST.SHOP_TYPE_ID = P.SHOP_TYPE_ID
			 LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = P.LOCATION  AND CB1.CODE_TYPE = 'LOCATION_CD'
    		
		<where>	
		  	<if test="programId != null">
		    	P.PROGRAM_ID = #{programId}
		  	</if>
		  	<if test="programShopIncludedId != null">
		    	AND P.PROGRAM_SHOP_INCLUDED_ID = #{programShopIncludedId}
		  	</if>
	  	</where>		
	</select>
	
	
	<select id="getShopMasterList" resultType="ShopModelBean"> 
       	SELECT S.SHOP_ID 
		      , S.SHOP_NAME
		      , S.SHOP_TYPE_ID 
			  , ST.SHOP_TYPE_NAME AS SHOP_TYPE 
		      , S.LOCATION AS LOCATION_ID 
              , CB1.CODE_NAME AS LOCATION_NAME
		      , S.SHOP_NO
		      , S.ACTIVE_FLAG 
		      , S.CREATED_DATE
			  , S.CREATED_BY
			  , S.UPDATED_DATE
			  , S.UPDATED_BY 
		  	FROM LOY_SHOP S
		  	LEFT JOIN LOY_SHOP_TYPE ST ON ST.SHOP_TYPE_ID = S.SHOP_TYPE_ID
			LEFT JOIN TB_CODEBOOK CB1 ON CB1.CODE_ID = S.LOCATION AND CB1.CODE_TYPE = 'LOCATION_CD'
			left join jlo.LOY_PROGRAM_SHOP_INCLUDED psi on psi.SHOP_ID = s.SHOP_ID and psi.PROGRAM_ID = #{programId}
		WHERE 
       		psi.PROGRAM_ID is null
		<if test="locationId != null">
	    	AND S.LOCATION = #{locationId}
	  	</if>
		<if test="shopTypeId != null">
	    	AND S.SHOP_TYPE_ID = #{shopTypeId}
	  	</if>
	  	<if test="shopName != null">
			<bind name="shopName" value="'%'+shopName + '%'" />
	    	AND S.SHOP_NAME like #{shopName}
	  	</if>
		<if test="buId != null">
	    	AND S.BU_ID = #{buId}
	  	</if>
		<choose>
			<when test="sortColumn != null">
		  		<if test="sortColumn == 'shopNo'">
		  			ORDER BY S.SHOP_NO ${sortDirection}	  	
		  		</if>
		  		<if test="sortColumn == 'shopName'">
		  			ORDER BY S.SHOP_NAME ${sortDirection}	  	
		  		</if>
		  	</when>
		  	<otherwise>
		  		ORDER BY S.SHOP_NAME DESC	  	
		  	</otherwise>
	  	</choose>
	</select>
	
	<insert id="createShop" keyColumn="PROGRAM_SHOP_ID" keyProperty="promotionShopId" useGeneratedKeys="true">
			INSERT INTO LOY_PROGRAM_SHOP_INCLUDED(
    			PROGRAM_ID
				, LOCATION
				, SHOP_ID
				, SHOP_TYPE_ID
				, CREATED_DATE
				, CREATED_BY
				, UPDATED_DATE
				, UPDATED_BY
			)VALUES(
				#{programId}
				, #{locationId}
				, #{shopId}
				, #{shopTypeId}
				, NOW()
				, #{createdBy}
				, NOW()
				, #{createdBy}
			)
	</insert>
	
	<insert id="insertProgramShop" parameterType="map">
			INSERT INTO LOY_PROGRAM_SHOP_INCLUDED(
					PROGRAM_ID
					, LOCATION
					, SHOP_ID
					, SHOP_TYPE_ID
					, CREATED_DATE
					, CREATED_BY
					, UPDATED_DATE
					, UPDATED_BY
				) VALUES		
				<foreach item="programShopModelBean" index="index" collection="programShopList" open="" separator="," close="">
					(
						#{programShopModelBean.programId}
						, #{programShopModelBean.locationId}
						, #{programShopModelBean.shopId}
						, #{programShopModelBean.shopTypeId}
			           	, NOW()
			           	, #{programShopModelBean.createdBy}
			           	, NOW()
			           	, #{programShopModelBean.updatedBy}
			        )
	        	</foreach>
	</insert>
	
	<delete id="deleteShop">
			DELETE FROM LOY_PROGRAM_SHOP_INCLUDED WHERE PROGRAM_SHOP_INCLUDED_ID = #{programShopIncludedId}
	</delete>
	
	<select id="getTableList" resultType="selectorModelBean">
       	SELECT UPPER(tables.TABLE_NAME) as codeId,
			UPPER(tables.TABLE_NAME) AS codeName
		FROM information_schema.tables tables
		<where>
			<if test="tableSchema != null">
		    	AND tables.TABLE_SCHEMA = #{tableSchema}
		  	</if>
		  	<if test="tableNamePrefix != null">
		    	<bind name="_tableNamePrefix" value="tableNamePrefix + '%'" />
		    	AND tables.TABLE_NAME LIKE #{_tableNamePrefix}
		  	</if>
	  	</where>
		ORDER BY tables.TABLE_NAME ASC
	</select>
	
	<select id="getColumnList" resultType="selectorModelBean">
       	SELECT UPPER(columns.COLUMN_NAME) as codeId
			, UPPER(columns.COLUMN_NAME) as codeName
			, columns.DATA_TYPE as etc1
		FROM information_schema.columns columns
		<where>
			<if test="tableSchema != null">
		    	AND columns.table_schema = #{tableSchema}
		  	</if>
		  	<if test="tableName != null">
		    	AND columns.table_name = #{tableName}
		  	</if>
	  	</where>
		ORDER BY columns.COLUMN_NAME ASC
	</select>
</mapper>